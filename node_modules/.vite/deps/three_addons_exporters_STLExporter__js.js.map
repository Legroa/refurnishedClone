{
  "version": 3,
  "sources": ["../../three/examples/jsm/exporters/STLExporter.js"],
  "sourcesContent": ["import { Vector3 } from 'three';\r\n\r\n/**\r\n * Usage:\r\n *  const exporter = new STLExporter();\r\n *\r\n *  // second argument is a list of options\r\n *  const data = exporter.parse( mesh, { binary: true } );\r\n *\r\n */\r\n\r\nclass STLExporter {\r\n\r\n\tparse( scene, options = {} ) {\r\n\r\n\t\toptions = Object.assign( {\r\n\t\t\tbinary: false\r\n\t\t}, options );\r\n\r\n\t\tconst binary = options.binary;\r\n\r\n\t\t//\r\n\r\n\t\tconst objects = [];\r\n\t\tlet triangles = 0;\r\n\r\n\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tconst geometry = object.geometry;\r\n\r\n\t\t\t\tconst index = geometry.index;\r\n\t\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\t\t\ttriangles += ( index !== null ) ? ( index.count / 3 ) : ( positionAttribute.count / 3 );\r\n\r\n\t\t\t\tobjects.push( {\r\n\t\t\t\t\tobject3d: object,\r\n\t\t\t\t\tgeometry: geometry\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tlet output;\r\n\t\tlet offset = 80; // skip header\r\n\r\n\t\tif ( binary === true ) {\r\n\r\n\t\t\tconst bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\r\n\t\t\tconst arrayBuffer = new ArrayBuffer( bufferLength );\r\n\t\t\toutput = new DataView( arrayBuffer );\r\n\t\t\toutput.setUint32( offset, triangles, true ); offset += 4;\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = '';\r\n\t\t\toutput += 'solid exported\\n';\r\n\r\n\t\t}\r\n\r\n\t\tconst vA = new Vector3();\r\n\t\tconst vB = new Vector3();\r\n\t\tconst vC = new Vector3();\r\n\t\tconst cb = new Vector3();\r\n\t\tconst ab = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\tfor ( let i = 0, il = objects.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst object = objects[ i ].object3d;\r\n\t\t\tconst geometry = objects[ i ].geometry;\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t// indexed geometry\r\n\r\n\t\t\t\tfor ( let j = 0; j < index.count; j += 3 ) {\r\n\r\n\t\t\t\t\tconst a = index.getX( j + 0 );\r\n\t\t\t\t\tconst b = index.getX( j + 1 );\r\n\t\t\t\t\tconst c = index.getX( j + 2 );\r\n\r\n\t\t\t\t\twriteFace( a, b, c, positionAttribute, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed geometry\r\n\r\n\t\t\t\tfor ( let j = 0; j < positionAttribute.count; j += 3 ) {\r\n\r\n\t\t\t\t\tconst a = j + 0;\r\n\t\t\t\t\tconst b = j + 1;\r\n\t\t\t\t\tconst c = j + 2;\r\n\r\n\t\t\t\t\twriteFace( a, b, c, positionAttribute, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( binary === false ) {\r\n\r\n\t\t\toutput += 'endsolid exported\\n';\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t\tfunction writeFace( a, b, c, positionAttribute, object ) {\r\n\r\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\r\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\r\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\r\n\r\n\t\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\t\tobject.applyBoneTransform( a, vA );\r\n\t\t\t\tobject.applyBoneTransform( b, vB );\r\n\t\t\t\tobject.applyBoneTransform( c, vC );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvA.applyMatrix4( object.matrixWorld );\r\n\t\t\tvB.applyMatrix4( object.matrixWorld );\r\n\t\t\tvC.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\twriteNormal( vA, vB, vC );\r\n\r\n\t\t\twriteVertex( vA );\r\n\t\t\twriteVertex( vB );\r\n\t\t\twriteVertex( vC );\r\n\r\n\t\t\tif ( binary === true ) {\r\n\r\n\t\t\t\toutput.setUint16( offset, 0, true ); offset += 2;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toutput += '\\t\\tendloop\\n';\r\n\t\t\t\toutput += '\\tendfacet\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction writeNormal( vA, vB, vC ) {\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab ).normalize();\r\n\r\n\t\t\tnormal.copy( cb ).normalize();\r\n\r\n\t\t\tif ( binary === true ) {\r\n\r\n\t\t\t\toutput.setFloat32( offset, normal.x, true ); offset += 4;\r\n\t\t\t\toutput.setFloat32( offset, normal.y, true ); offset += 4;\r\n\t\t\t\toutput.setFloat32( offset, normal.z, true ); offset += 4;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toutput += '\\tfacet normal ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\r\n\t\t\t\toutput += '\\t\\touter loop\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction writeVertex( vertex ) {\r\n\r\n\t\t\tif ( binary === true ) {\r\n\r\n\t\t\t\toutput.setFloat32( offset, vertex.x, true ); offset += 4;\r\n\t\t\t\toutput.setFloat32( offset, vertex.y, true ); offset += 4;\r\n\t\t\t\toutput.setFloat32( offset, vertex.z, true ); offset += 4;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toutput += '\\t\\t\\tvertex ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { STLExporter };\r\n"],
  "mappings": "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",
  "names": ["vA", "vB", "vC"]
}
